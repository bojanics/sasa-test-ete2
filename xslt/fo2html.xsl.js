var xsltObjFO2HTML = '<?xml version=\'1.0\' encoding=\'UTF-8\'?> \n \n<!-- =============================================================== --> \n<!--                                                                 --> \n<!-- Convert XSL FO (as in REC 2001-10-15) to HTML                    --> \n<!--                                                                 --> \n<!-- C RenderX 2000-2001                                             --> \n<!-- Permission to copy and modify is granted, provided this notice  --> \n<!-- is included in all copies and/or derived work.                  --> \n<!--                                                                 --> \n<!-- Author: Nikolai Grigoriev, grig@renderx.com                     --> \n<!--                                                                 --> \n<!-- =============================================================== --> \n \n \n<!DOCTYPE xsl:stylesheet [ \n  <!ENTITY anchor "<xsl:apply-templates select=\'@id\' xmlns:xsl=\'http://www.w3.org/1999/XSL/Transform\'/>"> \n  <!ENTITY add-style "<xsl:call-template name=\'add-style-attribute\' xmlns:xsl=\'http://www.w3.org/1999/XSL/Transform\'/>"> \n]> \n \n<xsl:stylesheet version="1.0" \n                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" \n                xmlns:fo="http://www.w3.org/1999/XSL/Format" \n                exclude-result-prefixes="fo"> \n \n<xsl:output method="html" \n            version="4.0" \n            encoding="utf-8" \n            indent="yes"/> \n \n<!-- =============================================================== --> \n<!-- Root. Create the bone and call templates for each page sequence --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:root"> \n  <html> \n  <!-- \n    <head> \n      <title> \n        <xsl:choose> \n          <xsl:when test="descendant::fo:title[1]"> \n            <xsl:value-of select="fo:title"/> \n          </xsl:when> \n          <xsl:otherwise>XSL FO Document</xsl:otherwise> \n        </xsl:choose> \n      </title> \n      <META http-equiv="Content-Style-Type" content="text/css">;</META> \n      <style type="text/css"> \n        a { color: black; border: none; text-decoration: none; } \n        img { border: none; } \n      </style> \n    </head> \n    --> \n \n    <body bgcolor="white" marginwidth="6" marginheight="6" leftmargin="6" topmargin="6"> \n      <!-- ONLY THING WE CHANGED TO HAVE PAGE LINKED BACK TO THE APPLICATION --> \n      <!--<p><a href="ProcessStartPO.po">${GoToStartProcessPage}</a></p>--> \n      <xsl:apply-templates select="fo:page-sequence"/> \n    </body> \n  </html> \n \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- fo:page-sequence. Draws a header before and a footer after.     --> \n<!-- Sidebars are skipped: there\'s no way to rotate the text in HTML --> \n<!-- and horizontal text in the sidebars eats up too much space.     --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:page-sequence"> \n \n    <xsl:variable name="current-master"><xsl:value-of select="@master-reference"/></xsl:variable> \n \n    <!-- One page master will be used for the whole page sequence --> \n    <xsl:variable name="page-master-name"> \n      <xsl:choose> \n        <xsl:when test="../fo:layout-master-set/fo:simple-page-master[@master-name=$current-master]"> \n          <!-- specified master is a page master: use it --> \n          <xsl:value-of select="$current-master"/> \n        </xsl:when> \n        <xsl:otherwise> \n          <!-- specified master is a page sequence master: --> \n          <!-- find master name for the first page --> \n          <xsl:apply-templates select="../fo:layout-master-set/fo:page-sequence-master[@master-name=$current-master]"/> \n        </xsl:otherwise> \n      </xsl:choose> \n    </xsl:variable> \n \n    <!-- Load the page master into a variable. No problem if it\'s null; should work the same ;-) --> \n    <xsl:variable name="page-master" select="../fo:layout-master-set/fo:simple-page-master[@master-name=$page-master-name]"/> \n \n \n    <!-- Start real drawing --> \n \n    <!-- Header --> \n    <xsl:variable name="header-region" select="$page-master/fo:region-before"/> \n    <xsl:apply-templates select="fo:static-content[@flow-name = $header-region/@region-name \n                              or (@flow-name=\'xsl-region-before\' and not($header-region/@region-name))]"> \n      <xsl:with-param name="region" select="$header-region"/> \n    </xsl:apply-templates> \n \n    <!-- Body --> \n    <xsl:apply-templates select="fo:flow"> \n      <xsl:with-param name="region" select="$page-master/fo:region-body"/> \n    </xsl:apply-templates> \n \n    <!-- Footer --> \n    <xsl:variable name="footer-region" select="$page-master/fo:region-after"/> \n    <xsl:apply-templates select="fo:static-content[@flow-name = $footer-region/@region-name \n                              or (@flow-name=\'xsl-region-after\' and not($footer-region/@region-name))]"> \n      <xsl:with-param name="region" select="$footer-region"/> \n    </xsl:apply-templates> \n \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- fo:block                                                        --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:block"> \n  &anchor;<div>&add-style;<xsl:apply-templates mode="check-for-pre"/></div> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- fo:inline-sequence                                              --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:inline | fo:wrapper"> \n  &anchor;<span>&add-style;<xsl:apply-templates/></span> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- fo:list-block                                                   --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:list-block"> \n  <xsl:variable name="label-separation"> \n    <xsl:choose> \n      <xsl:when test="@provisional-label-separation"> \n        <xsl:apply-templates select="@provisional-label-separation" \n                             mode="convert-to-pixels"/> \n      </xsl:when> \n      <xsl:otherwise>8</xsl:otherwise> \n    </xsl:choose> \n  </xsl:variable> \n \n  <xsl:variable name="body-offset"> \n    <xsl:choose> \n      <xsl:when test="@provisional-distance-between-starts"> \n        <xsl:apply-templates select="@provisional-distance-between-starts" \n                             mode="convert-to-pixels"/> \n      </xsl:when> \n      <xsl:otherwise>32</xsl:otherwise> \n    </xsl:choose> \n  </xsl:variable> \n \n  <div>&add-style; \n    &anchor; \n    <table width="100%"> \n      <xsl:apply-templates select="fo:list-item | fo:list-item-label"> \n        <xsl:with-param name="label-width" \n                        select="$body-offset - $label-separation"/> \n        <xsl:with-param name="gap-width" \n                        select="$label-separation"/> \n      </xsl:apply-templates> \n    </table> \n  </div> \n \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- fo:list-item                                                    --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:list-item"> \n  <xsl:param name="label-width"/> \n  <xsl:param name="gap-width"/> \n \n  <tr>&add-style; \n    <xsl:apply-templates select="fo:list-item-label" mode="draw-cell"> \n       <xsl:with-param name="width" select="$label-width"/> \n    </xsl:apply-templates> \n    <xsl:if test="$gap-width &gt; 0"> \n      <td width="{$gap-width}">&#160;</td> \n    </xsl:if> \n \n    <xsl:apply-templates select="fo:list-item-body" mode="draw-cell"/> \n  </tr> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- fo:list-item-label - itemless lists                             --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:list-block/fo:list-item-label"> \n  <xsl:param name="label-width"/> \n  <xsl:param name="gap-width"/> \n \n  <tr> \n    <xsl:apply-templates select="." mode="draw-cell"> \n       <xsl:with-param name="width" select="$label-width"/> \n    </xsl:apply-templates> \n    <xsl:if test="$gap-width &gt; 0"> \n      <td width="{$gap-width}">&#160;</td> \n    </xsl:if> \n \n    <xsl:apply-templates select="following-sibling::fo:list-item-body[1]" mode="draw-cell"/> \n  </tr> \n</xsl:template> \n \n \n<!-- =============================================================== --> \n<!-- fo:list-item-body - itemless lists                              --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:list-item-label | fo:list-item-body" mode="draw-cell"> \n  <xsl:param name="width" select="\'auto\'"/> \n  <td valign="top">&add-style;&anchor; \n    <xsl:if test="$width != \'auto\'"> \n      <xsl:attribute name="width"> \n        <xsl:value-of select="$width"/> \n      </xsl:attribute> \n    </xsl:if> \n \n    <xsl:apply-templates mode="check-for-pre"/> \n  </td> \n</xsl:template> \n \n \n<!-- =============================================================== --> \n<!-- fo:table and its components                                     --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:table"> \n  &anchor; \n  <table>&add-style; \n    <xsl:if test="not(@display-align)"> \n      <xsl:attribute name="valign">top</xsl:attribute> \n    </xsl:if> \n \n    <xsl:apply-templates/> \n  </table> \n</xsl:template> \n \n<xsl:template match="fo:table-header"> \n  <thead>&add-style; \n    <xsl:apply-templates/> \n  </thead> \n</xsl:template> \n \n<xsl:template match="fo:table-footer"> \n  <tfoot>&add-style; \n    <xsl:apply-templates/> \n  </tfoot> \n</xsl:template> \n \n<xsl:template match="fo:table-body"> \n  <tbody>&add-style; \n    <xsl:apply-templates/> \n  </tbody> \n</xsl:template> \n \n<xsl:template match="fo:table-row"> \n  <tr>&add-style; \n    <xsl:apply-templates mode="display"/> \n  </tr> \n</xsl:template> \n \n<xsl:template match="fo:table-cell" mode="display"> \n  <td>&add-style; \n    <xsl:if test="not(@display-align)"> \n      <xsl:attribute name="valign">top</xsl:attribute> \n    </xsl:if> \n    <xsl:apply-templates select="@*" mode="get-table-attributes"/> \n    <xsl:apply-templates mode="check-for-pre"/> \n  </td> \n</xsl:template> \n \n<xsl:template match="fo:table-cell" priority="-1"/> \n \n<!-- This template accounts for "rowless" tables --> \n<xsl:template priority="1" \n              match="fo:table-cell[not(parent::fo:table-row)] \n              [not(preceding-sibling::fo:table-cell) or @starts-row=\'true\' \n               or preceding-sibling::fo:table-cell[1][@ends-row=\'true\']]"> \n  <tr> \n    <xsl:call-template name="enumerate-rowless-cells"/> \n  </tr> \n</xsl:template> \n \n<xsl:template name="enumerate-rowless-cells"> \n  <xsl:apply-templates select="." mode="display"/> \n  <xsl:if test="not(@ends-row=\'true\')"> \n    <xsl:for-each select="following-sibling::fo:table-cell[1] \n                          [not(@starts-row=\'true\')]"> \n      <xsl:call-template name="enumerate-rowless-cells"/> \n    </xsl:for-each> \n  </xsl:if> \n</xsl:template> \n \n \n<!-- =============================================================== --> \n<!-- fo:inline-graphic                                               --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:external-graphic"> \n  <xsl:variable name="cleaned-url"> \n    <xsl:apply-templates select="@src" mode="unbracket-url"/> \n  </xsl:variable> \n  &anchor;<img src="{$cleaned-url}"><xsl:apply-templates select="@height|@width|@*[starts-with(name(),\'border\')]"/></img> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- fo:basic-link                                                  --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:basic-link[@external-destination]"> \n \n  <xsl:variable name="cleaned-url"> \n    <xsl:apply-templates select="@external-destination" mode="unbracket-url"/> \n  </xsl:variable> \n \n  &anchor;<a href="{$cleaned-url}">&add-style;<xsl:apply-templates/></a> \n</xsl:template> \n \n<xsl:template match="fo:basic-link[@internal-destination]"> \n  &anchor;<a href="#{@internal-destination}">&add-style;<xsl:apply-templates/></a> \n</xsl:template> \n \n \n<!-- =============================================================== --> \n<!-- fo:marker/fo:retrieve-marker                                    --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:marker"/> \n<xsl:template match="fo:marker" mode="retrieve-marker"> \n  <xsl:apply-templates/> \n</xsl:template> \n \n<xsl:template match="fo:retrieve-marker"> \n \n  <xsl:variable name="class-name" select="@retrieve-class-name"/> \n  <xsl:variable name="matching-markers" \n                select="ancestor::fo:page-sequence/descendant::fo:marker[@marker-class-name=$class-name]"/> \n \n  <xsl:choose> \n    <xsl:when test="@retrieve-position=\'last-starting-within-page\' \n                 or @retrieve-position=\'last-ending-within-page\'"> \n      <xsl:apply-templates select="$matching-markers[position()=last()]" mode="retrieve-marker"/> \n    </xsl:when> \n    <xsl:otherwise> \n      <xsl:apply-templates select="$matching-markers[1]" mode="retrieve-marker"/> \n    </xsl:otherwise> \n  </xsl:choose> \n \n</xsl:template> \n \n \n \n \n \n<!-- *************************************************************** --> \n<!-- Treatment of attributes that are either identical to their CSS1 --> \n<!-- counterparts, of find an equivalent expression there            --> \n \n<!-- =============================================================== --> \n<!-- Default rule: copy CSS1 attributes and suppress all other       --> \n<!-- =============================================================== --> \n \n<xsl:template match="@*" priority="-2" mode="collect-style-attributes"/> \n \n<xsl:template match="@color | \n                     @background | \n                     @background-color | \n                     @background-image | \n                     @background-position | \n                     @background-repeat | \n                     @padding | \n                     @padding-top | \n                     @padding-bottom | \n                     @padding-right | \n                     @padding-left | \n                     @margin | \n                     @margin-top | \n                     @margin-bottom | \n                     @margin-right | \n                     @margin-left | \n                     @border | \n                     @border-top | \n                     @border-bottom | \n                     @border-right | \n                     @border-left | \n                     @border-width | \n                     @border-top-width | \n                     @border-bottom-width | \n                     @border-right-width | \n                     @border-left-width | \n                     @border-color | \n                     @border-top-color | \n                     @border-bottom-color | \n                     @border-right-color | \n                     @border-left-color | \n                     @border-style | \n                     @border-top-style | \n                     @border-bottom-style | \n                     @border-right-style | \n                     @border-left-style | \n                     @letter-spacing | \n                     @word-spacing | \n                     @line-height | \n                     @font | \n                     @font-family | \n                     @font-size | \n                     @font-weight | \n                     @font-style | \n                     @font-variant | \n                     @vertical-align | \n                     @text-decoration | \n                     @text-indent | \n                     @text-transform" \n                     mode="collect-style-attributes"> \n  <xsl:value-of select="name()"/> \n  <xsl:text>: </xsl:text> \n  <xsl:value-of select="."/> \n  <xsl:text>; </xsl:text> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- Some attributes deserve special treatment --> \n \n<xsl:template match="@text-align" mode="collect-style-attributes"> \n  <xsl:text>text-align: </xsl:text> \n  <xsl:choose> \n    <xsl:when test=".=\'start\' or .=\'inside\'">left</xsl:when> \n    <xsl:when test=".=\'end\' or .=\'outside\'">right</xsl:when> \n    <xsl:otherwise><xsl:value-of select="."/></xsl:otherwise> \n  </xsl:choose> \n  <xsl:text>; </xsl:text> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- Handling writing-mode in borders, padding, and margins          --> \n<!-- This version presumes lr-tb writing mode only.                  --> \n \n<xsl:template match="@space-before.optimum | \n                     @space-before [not (../@space-before.optimum)] | \n                     @space-before.minimum [not (../@space-before.optimum) and not (../@space-before)] | \n                     @space-before.maximum [not (../@space-before.optimum) and not (../@space-before) and not (../@space-before.minimum)] | \n                     @space-after.optimum | \n                     @space-after [not (../@space-after.optimum)] | \n                     @space-after.minimum [not (../@space-after.optimum) and not (../@space-after)] | \n                     @space-after.maximum [not (../@space-after.optimum) and not (../@space-after) and not (../@space-after.minimum)] | \n                     @space-start.optimum | \n                     @space-start [not (../@space-start.optimum)] | \n                     @space-start.minimum [not (../@space-start.optimum) and not (../@space-start)] | \n                     @space-start.maximum [not (../@space-start.optimum) and not (../@space-start) and not (../@space-start.minimum)] | \n                     @space-end.optimum | \n                     @space-end [not (../@space-end.optimum)] | \n                     @space-end.minimum [not (../@space-end.optimum) and not (../@space-end)] | \n                     @space-end.maximum [not (../@space-end.optimum) and not (../@space-end) and not (../@space-end.minimum)] | \n                     @start-indent[not(parent::fo:list-item-body)] | \n                     @end-indent[not(parent::fo:list-item-label)] | \n                     @padding-before | \n                     @padding-before.length | \n                     @margin-before | \n                     @border-before | \n                     @border-before-width | \n                     @border-before-width.length | \n                     @border-before-color | \n                     @border-before-style | \n                     @padding-after | \n                     @padding-after.length | \n                     @margin-after | \n                     @border-after | \n                     @border-after-width | \n                     @border-after-width.length | \n                     @border-after-color | \n                     @border-after-style | \n                     @padding-start | \n                     @padding-start.length | \n                     @margin-start | \n                     @border-start | \n                     @border-start-width | \n                     @border-start-width.length | \n                     @border-start-color | \n                     @border-start-style | \n                     @padding-end | \n                     @padding-end.length | \n                     @margin-end | \n                     @border-end | \n                     @border-end-width | \n                     @border-end-width.length | \n                     @border-end-color | \n                     @border-end-style" \n              mode="collect-style-attributes"> \n \n  <xsl:variable name="property"> \n    <xsl:choose> \n      <xsl:when test="starts-with(name(), \'border\')">border</xsl:when> \n      <xsl:when test="starts-with(name(), \'padding\')">padding</xsl:when> \n      <xsl:when test="starts-with(name(), \'margin\')">margin</xsl:when> \n      <xsl:when test="starts-with(name(), \'space\')">margin</xsl:when> \n      <xsl:when test="contains(name(), \'-indent\')">margin</xsl:when> \n    </xsl:choose> \n  </xsl:variable> \n \n  <xsl:variable name="side"> \n    <xsl:choose> \n      <xsl:when test="contains(name(), \'-before\') or contains(name(), \'-top\')">-top</xsl:when> \n      <xsl:when test="contains(name(), \'-after\') or contains(name(), \'-bottom\')">-bottom</xsl:when> \n      <xsl:when test="contains(name(), \'-start\') or starts-with(name(), \'start-\') or contains(name(), \'-left\')">-left</xsl:when> \n      <xsl:when test="contains(name(), \'-end\') or starts-with(name(), \'end-\') or contains(name(), \'-right\')">-right</xsl:when> \n    </xsl:choose> \n  </xsl:variable> \n \n  <xsl:variable name="parameter"> \n    <xsl:choose> \n      <xsl:when test="contains(name(), \'-width\')">-width</xsl:when> \n      <xsl:when test="contains(name(), \'-color\')">-color</xsl:when> \n      <xsl:when test="contains(name(), \'-style\')">-style</xsl:when> \n    </xsl:choose> \n  </xsl:variable> \n \n  <xsl:value-of select="concat($property, $side, $parameter)"/> \n  <xsl:text>: </xsl:text> \n  <xsl:value-of select="."/> \n  <xsl:text>; </xsl:text> \n</xsl:template> \n \n<xsl:template match="*" mode="check-for-pre" priority="-1"> \n  <xsl:apply-templates select="."/> \n</xsl:template> \n \n<xsl:template match="*[@white-space-collapse=\'false\' \n                    or @linefeed-treatment=\'preserve\' \n                    or @wrap-option=\'no-wrap\' \n                    or @white-space=\'pre\']" \n                     mode="check-for-pre"> \n  <pre><xsl:apply-templates select="."/></pre> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- Recalculate a length to pixels. 1 in = 96 px, 1 em = 1 pc;      --> \n<!-- this gives reasonable results for 800x600 and 1024x768 screens  --> \n<!-- =============================================================== --> \n \n<xsl:template match="@*" mode="convert-to-pixels"> \n  <xsl:variable name="scaling-factor"> \n    <xsl:choose> \n      <xsl:when test="contains (., \'pt\')">1.33</xsl:when> \n      <xsl:when test="contains (., \'px\')">1</xsl:when> \n      <xsl:when test="contains (., \'pc\')">16</xsl:when> \n      <xsl:when test="contains (., \'in\')">96</xsl:when> \n      <xsl:when test="contains (., \'cm\')">37.8</xsl:when> \n      <xsl:when test="contains (., \'mm\')">3.78</xsl:when> \n      <xsl:when test="contains (., \'em\')">16</xsl:when> <!-- guess: 1em = 12pt --> \n      <xsl:otherwise>1</xsl:otherwise> \n    </xsl:choose> \n  </xsl:variable> \n \n  <xsl:variable name="numeric-value" \n       select="translate (., \'-0123456789.ptxcinme\', \'-0123456789.\')"/> \n  <xsl:value-of select="$numeric-value * $scaling-factor"/> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- Remove brackets & quotes around URLs                            --> \n<!-- =============================================================== --> \n \n<xsl:template match="@*" mode="unbracket-url"> \n  <xsl:variable name="href" select="normalize-space(.)"/> \n \n  <xsl:choose> \n    <xsl:when test="(starts-with($href, \'url(\') or starts-with($href, \'url (\')) \n                     and substring ($href, string-length($href)) = \')\'"> \n      <!-- Remove \'url\' from the beginning --> \n      <xsl:variable name="bracketed" \n           select="normalize-space(substring($href, 4))"/> \n      <!-- Remove brackets --> \n      <xsl:variable name="quoted" \n           select="normalize-space(substring($bracketed, 2, string-length ($bracketed) - 2 ))"/> \n \n      <xsl:variable name="q" select="\'&quot;\'"/> \n      <xsl:variable name="a" select=\'"&apos;"\'/> \n      <!-- Remove optional quotes --> \n      <xsl:choose> \n        <xsl:when test="( substring($quoted, 1, 1) = $q and \n                          substring($quoted, string-length($quoted), 1) = $q ) \n                     or ( substring($quoted, 1, 1) = $a and \n                          substring($quoted, string-length($quoted), 1) = $a )"> \n          <xsl:value-of select="substring($quoted, 2, string-length($quoted) - 2)"/> \n        </xsl:when> \n        <xsl:otherwise><xsl:value-of select="$quoted"/></xsl:otherwise> \n      </xsl:choose> \n    </xsl:when> \n    <xsl:otherwise><xsl:value-of select="."/></xsl:otherwise> \n  </xsl:choose> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- Page number - replace by a bullet                               --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:page-number | fo:page-number-citation"> \n  <span>&add-style;<xsl:text>&#x2022;</xsl:text></span> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- Leader - replace by a space                                     --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:leader"> \n  <xsl:text> &#xA0;&#xA0;&#xA0; </xsl:text> \n</xsl:template> \n \n \n \n<!-- =============================================================== --> \n<!-- Static content - add a <hr/> before or after it                 --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:flow | fo:static-content"> \n  <xsl:param name="region"/> \n \n  <div>&add-style;&anchor; \n    <xsl:apply-templates select="$region"/> \n    <xsl:apply-templates/> \n    <xsl:if test=".//fo:footnote"> \n      <br>;</br><hr/> \n      <xsl:apply-templates select=".//fo:footnote" mode="after-text"/> \n    </xsl:if> \n  </div> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- Footnotes                                                       --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:footnote"> \n  <xsl:apply-templates select="fo:inline"/> \n</xsl:template> \n \n<xsl:template match="fo:footnote" mode="after-text"> \n  <div>&add-style;&anchor; \n    <xsl:apply-templates select="fo:footnote-body"/> \n  </div> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- Copy all CSS1-compatible attributes to "style" property         --> \n<!-- =============================================================== --> \n \n<xsl:template name="add-style-attribute"> \n  <xsl:param name="orientation" select="0"/> \n  <xsl:variable name="style"> \n    <xsl:apply-templates select="@*" mode="collect-style-attributes"/> \n  </xsl:variable> \n \n  <xsl:if test="string-length($style) &gt; 0"> \n    <xsl:attribute name="style"><xsl:value-of select="normalize-space($style)"/></xsl:attribute> \n  </xsl:if> \n</xsl:template> \n \n<!-- =============================================================== --> \n<!-- Create an anchor                                                --> \n<!-- =============================================================== --> \n \n<xsl:template match="@id"><a name="{.}"/></xsl:template> \n \n<!-- =============================================================== --> \n<!-- Table cell geometry                                             --> \n<!-- =============================================================== --> \n \n<xsl:template match="@*" mode="get-table-attributes" priority="-1"/> \n \n<xsl:template match="@number-columns-spanned" \n                     mode="get-table-attributes"> \n  <xsl:attribute name="colspan"><xsl:value-of select="."/></xsl:attribute> \n</xsl:template> \n \n<xsl:template match="@number-rows-spanned" \n                     mode="get-table-attributes"> \n  <xsl:attribute name="rowspan"><xsl:value-of select="."/></xsl:attribute> \n</xsl:template> \n \n \n \n<!-- =============================================================== --> \n<!-- Page layout: determine master name for the first page           --> \n<!-- =============================================================== --> \n \n<xsl:template match="fo:page-sequence-master"> \n  <xsl:apply-templates select="*[1]"/> \n</xsl:template> \n \n<xsl:template match="fo:single-page-master-reference \n                   | fo:repeatable-page-master-reference"> \n  <xsl:value-of select="@master-reference"/> \n</xsl:template> \n \n<xsl:template match="fo:repeatable-page-master-alternatives"> \n  <xsl:choose> \n    <xsl:when test="fo:conditional-page-master-reference[@page-position=\'first\']"> \n      <xsl:value-of select="fo:conditional-page-master-reference[@page-position=\'first\'][1]/@master-reference"/> \n    </xsl:when> \n    <xsl:when test="fo:conditional-page-master-reference[@odd-or-even=\'odd\' and not (@blank-or-not-blank=\'blank\')]"> \n      <xsl:value-of select="fo:conditional-page-master-reference[@odd-or-even=\'odd\' and not (@blank-or-not-blank=\'blank\')][1]/@master-reference"/> \n    </xsl:when> \n    <xsl:when test="fo:conditional-page-master-reference[not(@odd-or-even=\'even\') and not (@blank-or-not-blank=\'blank\')]"> \n      <xsl:value-of select="fo:conditional-page-master-reference[not(@odd-or-even=\'even\') and not (@blank-or-not-blank=\'blank\')][1]/@master-reference"/> \n    </xsl:when> \n    <xsl:otherwise> <!-- cannot guess; take the first --> \n      <xsl:value-of select="fo:conditional-page-master-reference[1]/@master-reference"/> \n    </xsl:otherwise> \n  </xsl:choose> \n</xsl:template> \n \n \n<!-- =============================================================== --> \n<!-- Header/footer properties                                        --> \n<!-- =============================================================== --> \n \n \n<xsl:template match="@extent"> \n  <xsl:attribute name="width"><xsl:apply-templates select="." mode="convert-to-pixels"/></xsl:attribute> \n</xsl:template> \n \n<xsl:template match="@width | @height"> \n  <xsl:attribute name="{name()}"><xsl:apply-templates select="." mode="convert-to-pixels"/></xsl:attribute> \n</xsl:template> \n \n<xsl:template match="fo:region-before | fo:region-after"> \n  <xsl:call-template name="get-area-attributes"/> \n \n  <!-- For header and footer, we suppress margins and padding --> \n  <xsl:variable name="style"> \n    <xsl:apply-templates \n          select="@*[not (starts-with (name(), \'margin\') \n                          or starts-with (name(), \'space\') \n                          or starts-with (name(), \'padding\'))]" \n          mode="collect-style-attributes"> \n      <xsl:with-param name="orientation" select="@reference-orientation"/> \n    </xsl:apply-templates> \n  </xsl:variable> \n \n  <xsl:if test="string-length($style) &gt; 0"> \n    <xsl:attribute name="style"><xsl:value-of select="normalize-space($style)"/></xsl:attribute> \n  </xsl:if> \n \n</xsl:template> \n \n<xsl:template match="fo:region-body"> \n  <xsl:call-template name="get-area-attributes"/> \n \n  <!-- For region-body, we suppress margin attributes --> \n  <xsl:variable name="style"> \n    <xsl:apply-templates \n          select="@*[not (starts-with (name(), \'margin\') \n                          or starts-with (name(), \'space\'))]" \n          mode="collect-style-attributes"> \n      <xsl:with-param name="orientation" select="@reference-orientation"/> \n    </xsl:apply-templates> \n  </xsl:variable> \n \n  <xsl:if test="string-length($style) &gt; 0"> \n    <xsl:attribute name="style"><xsl:value-of select="normalize-space($style)"/></xsl:attribute> \n  </xsl:if> \n</xsl:template> \n \n<xsl:template match="fo:region-start | fo:region-end"/> \n \n<xsl:template name="get-area-attributes"> \n  <xsl:attribute name="valign"> \n    <xsl:choose> \n      <xsl:when test="@display-align"><xsl:value-of select="@display-align"/></xsl:when> \n      <xsl:otherwise>top</xsl:otherwise> \n    </xsl:choose> \n  </xsl:attribute> \n</xsl:template> \n \n</xsl:stylesheet>';
